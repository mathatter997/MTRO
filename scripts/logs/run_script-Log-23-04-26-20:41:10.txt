Wed Apr 26 20:41:10 2023: Starting simulation at run_script-Log-23-04-26-20:41:10.Log is also stored in output file at ./logs/run_script-Log-23-04-26-20:41:10.txtMQ2008
Wed Apr 26 20:41:10 2023: Read   0: Fold 1 of dataset MQ2008.
Wed Apr 26 20:41:10 2023: No group information is provided.
Wed Apr 26 20:41:10 2023: Launch 0: algo/PDBTR/info/1000/10/0.1-0.99999977-1 0 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:11 2023: Launch 1: algo/PDBTR/info/1000/10/0.1-0.99999977-1 1 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:11 2023: Launch 2: algo/PDBTR/info/1000/10/0.1-0.99999977-1 2 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:11 2023: Launch 3: algo/PDBTR/info/1000/10/0.1-0.99999977-1 3 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:12 2023: Launch 4: algo/PDBTR/info/1000/10/0.1-0.99999977-1 4 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:12 2023: Launch 5: algo/PDBTR/info/1000/10/0.1-0.99999977-1 5 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:13 2023: Launch 6: algo/PDBTR/info/1000/10/0.1-0.99999977-1 6 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:14 2023: Launch 7: algo/PDBTR/info/1000/10/0.1-0.99999977-1 7 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:14 2023: Launch 8: algo/PDBTR/info/1000/10/0.1-0.99999977-1 8 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:15 2023: Launch 9: algo/PDBTR/info/1000/10/0.1-0.99999977-1 9 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:16 2023: Launch 10: algo/PDBTR/info/1000/10/0.1-0.99999977-1 10 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:17 2023: Launch 11: algo/PDBTR/info/1000/10/0.1-0.99999977-1 11 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:18 2023: Launch 12: algo/PDBTR/info/1000/10/0.1-0.99999977-1 12 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:19 2023: Launch 13: algo/PDBTR/info/1000/10/0.1-0.99999977-1 13 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:20 2023: Launch 14: algo/PDBTR/info/1000/10/0.1-0.99999977-1 14 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:22 2023: Launch 15: algo/PDBTR/info/1000/10/0.1-0.99999977-1 15 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:23 2023: Launch 16: algo/PDBTR/info/1000/10/0.1-0.99999977-1 16 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:24 2023: Launch 17: algo/PDBTR/info/1000/10/0.1-0.99999977-1 17 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:26 2023: Launch 18: algo/PDBTR/info/1000/10/0.1-0.99999977-1 18 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:27 2023: Launch 19: algo/PDBTR/info/1000/10/0.1-0.99999977-1 19 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:41 2023: Launch 20: algo/PDBTR/info/1000/10/0.1-0.99999977-1 20 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:50 2023: Launch 21: algo/PDBTR/info/1000/10/0.1-0.99999977-1 21 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:57 2023: Launch 22: algo/PDBTR/info/1000/10/0.1-0.99999977-1 22 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:04 2023: Launch 23: algo/PDBTR/info/1000/10/0.1-0.99999977-1 23 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:12 2023: Launch 24: algo/PDBTR/info/1000/10/0.1-0.99999977-1 24 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:19 2023: Launch 25: algo/PDBTR/info/1000/10/0.1-0.99999977-1 25 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:24 2023: Launch 26: algo/PDBTR/info/1000/10/0.1-0.99999977-1 26 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:26 2023: Launch 27: algo/PDBTR/info/1000/10/0.1-0.99999977-1 27 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:30 2023: Launch 28: algo/PDBTR/info/1000/10/0.1-0.99999977-1 28 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:34 2023: Launch 29: algo/PDBTR/info/1000/10/0.1-0.99999977-1 29 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:36 2023: Launch 30: algo/PDBTR/info/1000/10/0.1-0.99999977-1 30 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:39 2023: Launch 31: algo/PDBTR/info/1000/10/0.1-0.99999977-1 31 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:45 2023: Launch 32: algo/PDBTR/info/1000/10/0.1-0.99999977-1 32 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:51 2023: Launch 33: algo/PDBTR/info/1000/10/0.1-0.99999977-1 33 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:59 2023: Launch 34: algo/PDBTR/info/1000/10/0.1-0.99999977-1 34 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:04 2023: Launch 35: algo/PDBTR/info/1000/10/0.1-0.99999977-1 35 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:10 2023: Launch 36: algo/PDBTR/info/1000/10/0.1-0.99999977-1 36 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:14 2023: Launch 37: algo/PDBTR/info/1000/10/0.1-0.99999977-1 37 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:20 2023: Launch 38: algo/PDBTR/info/1000/10/0.1-0.99999977-1 38 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:25 2023: Launch 39: algo/PDBTR/info/1000/10/0.1-0.99999977-1 39 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:41:10 2023: setting up ranker...
Wed Apr 26 20:41:10 2023: ranker set up complete
Wed Apr 26 20:41:10 2023: loop through impressions: 1000
Wed Apr 26 20:41:12 2023: impressions 100/1000
Wed Apr 26 20:41:15 2023: impressions 200/1000
Wed Apr 26 20:41:20 2023: impressions 300/1000
Wed Apr 26 20:41:26 2023: impressions 400/1000
Wed Apr 26 20:41:33 2023: impressions 500/1000
Wed Apr 26 20:41:41 2023: impressions 600/1000
Wed Apr 26 20:41:48 2023: impressions 700/1000
Wed Apr 26 20:41:56 2023: impressions 800/1000
Wed Apr 26 20:42:04 2023: impressions 900/1000
Wed Apr 26 20:42:12 2023: impressions 1000/1000
Wed Apr 26 20:42:12 2023: train_ranking
Wed Apr 26 20:42:12 2023: ranking_labels
Wed Apr 26 20:41:11 2023: setting up ranker...
Wed Apr 26 20:41:11 2023: ranker set up complete
Wed Apr 26 20:41:11 2023: loop through impressions: 1000
Wed Apr 26 20:41:13 2023: impressions 100/1000
Wed Apr 26 20:41:16 2023: impressions 200/1000
Wed Apr 26 20:41:20 2023: impressions 300/1000
Wed Apr 26 20:41:27 2023: impressions 400/1000
Wed Apr 26 20:41:34 2023: impressions 500/1000
Wed Apr 26 20:41:42 2023: impressions 600/1000
Wed Apr 26 20:41:50 2023: impressions 700/1000
Wed Apr 26 20:41:59 2023: impressions 800/1000
Wed Apr 26 20:42:07 2023: impressions 900/1000
Wed Apr 26 20:42:15 2023: impressions 1000/1000
Wed Apr 26 20:42:15 2023: train_ranking
Wed Apr 26 20:42:15 2023: ranking_labels
Wed Apr 26 20:41:11 2023: setting up ranker...
Wed Apr 26 20:41:11 2023: ranker set up complete
Wed Apr 26 20:41:11 2023: loop through impressions: 1000
Wed Apr 26 20:41:13 2023: impressions 100/1000
Wed Apr 26 20:41:17 2023: impressions 200/1000
Wed Apr 26 20:41:22 2023: impressions 300/1000
Wed Apr 26 20:41:30 2023: impressions 400/1000
Wed Apr 26 20:41:36 2023: impressions 500/1000
Wed Apr 26 20:41:43 2023: impressions 600/1000
Wed Apr 26 20:41:52 2023: impressions 700/1000
Wed Apr 26 20:42:00 2023: impressions 800/1000
Wed Apr 26 20:42:09 2023: impressions 900/1000
Wed Apr 26 20:42:18 2023: impressions 1000/1000
Wed Apr 26 20:42:18 2023: train_ranking
Wed Apr 26 20:42:18 2023: ranking_labels
Wed Apr 26 20:41:11 2023: setting up ranker...
Wed Apr 26 20:41:11 2023: ranker set up complete
Wed Apr 26 20:41:11 2023: loop through impressions: 1000
Wed Apr 26 20:41:14 2023: impressions 100/1000
Wed Apr 26 20:41:17 2023: impressions 200/1000
Wed Apr 26 20:41:23 2023: impressions 300/1000
Wed Apr 26 20:41:30 2023: impressions 400/1000
Wed Apr 26 20:41:38 2023: impressions 500/1000
Wed Apr 26 20:41:46 2023: impressions 600/1000
Wed Apr 26 20:41:54 2023: impressions 700/1000
Wed Apr 26 20:42:02 2023: impressions 800/1000
Wed Apr 26 20:42:11 2023: impressions 900/1000
Wed Apr 26 20:42:20 2023: impressions 1000/1000
Wed Apr 26 20:42:20 2023: train_ranking
Wed Apr 26 20:42:20 2023: ranking_labels
Wed Apr 26 20:41:13 2023: setting up ranker...
Wed Apr 26 20:41:13 2023: ranker set up complete
Wed Apr 26 20:41:13 2023: loop through impressions: 1000
Wed Apr 26 20:41:16 2023: impressions 100/1000
Wed Apr 26 20:41:21 2023: impressions 200/1000
Wed Apr 26 20:41:27 2023: impressions 300/1000
Wed Apr 26 20:41:34 2023: impressions 400/1000
Wed Apr 26 20:41:40 2023: impressions 500/1000
Wed Apr 26 20:41:48 2023: impressions 600/1000
Wed Apr 26 20:41:55 2023: impressions 700/1000
Wed Apr 26 20:42:02 2023: impressions 800/1000
Wed Apr 26 20:42:13 2023: impressions 900/1000
Wed Apr 26 20:42:21 2023: impressions 1000/1000
Wed Apr 26 20:42:21 2023: train_ranking
Wed Apr 26 20:42:21 2023: ranking_labels
Wed Apr 26 20:41:12 2023: setting up ranker...
Wed Apr 26 20:41:12 2023: ranker set up complete
Wed Apr 26 20:41:12 2023: loop through impressions: 1000
Wed Apr 26 20:41:15 2023: impressions 100/1000
Wed Apr 26 20:41:19 2023: impressions 200/1000
Wed Apr 26 20:41:25 2023: impressions 300/1000
Wed Apr 26 20:41:31 2023: impressions 400/1000
Wed Apr 26 20:41:39 2023: impressions 500/1000
Wed Apr 26 20:41:47 2023: impressions 600/1000
Wed Apr 26 20:41:56 2023: impressions 700/1000
Wed Apr 26 20:42:04 2023: impressions 800/1000
Wed Apr 26 20:42:12 2023: impressions 900/1000
Wed Apr 26 20:42:21 2023: impressions 1000/1000
Wed Apr 26 20:42:21 2023: train_ranking
Wed Apr 26 20:42:21 2023: ranking_labels
Wed Apr 26 20:41:12 2023: setting up ranker...
Wed Apr 26 20:41:12 2023: ranker set up complete
Wed Apr 26 20:41:12 2023: loop through impressions: 1000
Wed Apr 26 20:41:15 2023: impressions 100/1000
Wed Apr 26 20:41:19 2023: impressions 200/1000
Wed Apr 26 20:41:24 2023: impressions 300/1000
Wed Apr 26 20:41:31 2023: impressions 400/1000
Wed Apr 26 20:41:38 2023: impressions 500/1000
Wed Apr 26 20:41:47 2023: impressions 600/1000
Wed Apr 26 20:41:54 2023: impressions 700/1000
Wed Apr 26 20:42:04 2023: impressions 800/1000
Wed Apr 26 20:42:13 2023: impressions 900/1000
Wed Apr 26 20:42:22 2023: impressions 1000/1000
Wed Apr 26 20:42:22 2023: train_ranking
Wed Apr 26 20:42:22 2023: ranking_labels
Wed Apr 26 20:41:14 2023: setting up ranker...
Wed Apr 26 20:41:14 2023: ranker set up complete
Wed Apr 26 20:41:14 2023: loop through impressions: 1000
Wed Apr 26 20:41:17 2023: impressions 100/1000
Wed Apr 26 20:41:22 2023: impressions 200/1000
Wed Apr 26 20:41:27 2023: impressions 300/1000
Wed Apr 26 20:41:34 2023: impressions 400/1000
Wed Apr 26 20:41:41 2023: impressions 500/1000
Wed Apr 26 20:41:49 2023: impressions 600/1000
Wed Apr 26 20:41:57 2023: impressions 700/1000
Wed Apr 26 20:42:07 2023: impressions 800/1000
Wed Apr 26 20:42:16 2023: impressions 900/1000
Wed Apr 26 20:42:23 2023: impressions 1000/1000
Wed Apr 26 20:42:23 2023: train_ranking
Wed Apr 26 20:42:23 2023: ranking_labels
Wed Apr 26 20:41:14 2023: setting up ranker...
Wed Apr 26 20:41:14 2023: ranker set up complete
Wed Apr 26 20:41:14 2023: loop through impressions: 1000
Wed Apr 26 20:41:18 2023: impressions 100/1000
Wed Apr 26 20:41:24 2023: impressions 200/1000
Wed Apr 26 20:41:30 2023: impressions 300/1000
Wed Apr 26 20:41:37 2023: impressions 400/1000
Wed Apr 26 20:41:44 2023: impressions 500/1000
Wed Apr 26 20:41:51 2023: impressions 600/1000
Wed Apr 26 20:41:59 2023: impressions 700/1000
Wed Apr 26 20:42:08 2023: impressions 800/1000
Wed Apr 26 20:42:16 2023: impressions 900/1000
Wed Apr 26 20:42:24 2023: impressions 1000/1000
Wed Apr 26 20:42:24 2023: train_ranking
Wed Apr 26 20:42:24 2023: ranking_labels
Wed Apr 26 20:41:15 2023: setting up ranker...
Wed Apr 26 20:41:15 2023: ranker set up complete
Wed Apr 26 20:41:15 2023: loop through impressions: 1000
Wed Apr 26 20:41:19 2023: impressions 100/1000
Wed Apr 26 20:41:25 2023: impressions 200/1000
Wed Apr 26 20:41:33 2023: impressions 300/1000
Wed Apr 26 20:41:41 2023: impressions 400/1000
Wed Apr 26 20:41:49 2023: impressions 500/1000
Wed Apr 26 20:41:57 2023: impressions 600/1000
Wed Apr 26 20:42:04 2023: impressions 700/1000
Wed Apr 26 20:42:14 2023: impressions 800/1000
Wed Apr 26 20:42:23 2023: impressions 900/1000
Wed Apr 26 20:42:31 2023: impressions 1000/1000
Wed Apr 26 20:42:31 2023: train_ranking
Wed Apr 26 20:42:31 2023: ranking_labels
Wed Apr 26 20:41:16 2023: setting up ranker...
Wed Apr 26 20:41:16 2023: ranker set up complete
Wed Apr 26 20:41:16 2023: loop through impressions: 1000
Wed Apr 26 20:41:20 2023: impressions 100/1000
Wed Apr 26 20:41:28 2023: impressions 200/1000
Wed Apr 26 20:41:35 2023: impressions 300/1000
Wed Apr 26 20:41:43 2023: impressions 400/1000
Wed Apr 26 20:41:50 2023: impressions 500/1000
Wed Apr 26 20:42:00 2023: impressions 600/1000
Wed Apr 26 20:42:09 2023: impressions 700/1000
Wed Apr 26 20:42:18 2023: impressions 800/1000
Wed Apr 26 20:42:25 2023: impressions 900/1000
Wed Apr 26 20:42:32 2023: impressions 1000/1000
Wed Apr 26 20:42:33 2023: train_ranking
Wed Apr 26 20:42:33 2023: ranking_labels
Wed Apr 26 20:41:18 2023: setting up ranker...
Wed Apr 26 20:41:18 2023: ranker set up complete
Wed Apr 26 20:41:18 2023: loop through impressions: 1000
Wed Apr 26 20:41:24 2023: impressions 100/1000
Wed Apr 26 20:41:31 2023: impressions 200/1000
Wed Apr 26 20:41:39 2023: impressions 300/1000
Wed Apr 26 20:41:47 2023: impressions 400/1000
Wed Apr 26 20:41:55 2023: impressions 500/1000
Wed Apr 26 20:42:03 2023: impressions 600/1000
Wed Apr 26 20:42:12 2023: impressions 700/1000
Wed Apr 26 20:42:20 2023: impressions 800/1000
Wed Apr 26 20:42:28 2023: impressions 900/1000
Wed Apr 26 20:42:35 2023: impressions 1000/1000
Wed Apr 26 20:42:35 2023: train_ranking
Wed Apr 26 20:42:35 2023: ranking_labels
Wed Apr 26 20:41:22 2023: setting up ranker...
Wed Apr 26 20:41:22 2023: ranker set up complete
Wed Apr 26 20:41:22 2023: loop through impressions: 1000
Wed Apr 26 20:41:28 2023: impressions 100/1000
Wed Apr 26 20:41:35 2023: impressions 200/1000
Wed Apr 26 20:41:42 2023: impressions 300/1000
Wed Apr 26 20:41:49 2023: impressions 400/1000
Wed Apr 26 20:41:58 2023: impressions 500/1000
Wed Apr 26 20:42:05 2023: impressions 600/1000
Wed Apr 26 20:42:13 2023: impressions 700/1000
Wed Apr 26 20:42:21 2023: impressions 800/1000
Wed Apr 26 20:42:29 2023: impressions 900/1000
Wed Apr 26 20:42:35 2023: impressions 1000/1000
Wed Apr 26 20:42:35 2023: train_ranking
Wed Apr 26 20:42:35 2023: ranking_labels
Wed Apr 26 20:41:19 2023: setting up ranker...
Wed Apr 26 20:41:19 2023: ranker set up complete
Wed Apr 26 20:41:19 2023: loop through impressions: 1000
Wed Apr 26 20:41:26 2023: impressions 100/1000
Wed Apr 26 20:41:33 2023: impressions 200/1000
Wed Apr 26 20:41:40 2023: impressions 300/1000
Wed Apr 26 20:41:47 2023: impressions 400/1000
Wed Apr 26 20:41:55 2023: impressions 500/1000
Wed Apr 26 20:42:03 2023: impressions 600/1000
Wed Apr 26 20:42:12 2023: impressions 700/1000
Wed Apr 26 20:42:22 2023: impressions 800/1000
Wed Apr 26 20:42:27 2023: impressions 900/1000
Wed Apr 26 20:42:35 2023: impressions 1000/1000
Wed Apr 26 20:42:35 2023: train_ranking
Wed Apr 26 20:42:35 2023: ranking_labels
Wed Apr 26 20:41:17 2023: setting up ranker...
Wed Apr 26 20:41:17 2023: ranker set up complete
Wed Apr 26 20:41:17 2023: loop through impressions: 1000
Wed Apr 26 20:41:23 2023: impressions 100/1000
Wed Apr 26 20:41:30 2023: impressions 200/1000
Wed Apr 26 20:41:37 2023: impressions 300/1000
Wed Apr 26 20:41:45 2023: impressions 400/1000
Wed Apr 26 20:41:53 2023: impressions 500/1000
Wed Apr 26 20:42:03 2023: impressions 600/1000
Wed Apr 26 20:42:11 2023: impressions 700/1000
Wed Apr 26 20:42:20 2023: impressions 800/1000
Wed Apr 26 20:42:27 2023: impressions 900/1000
Wed Apr 26 20:42:36 2023: impressions 1000/1000
Wed Apr 26 20:42:36 2023: train_ranking
Wed Apr 26 20:42:36 2023: ranking_labels
Wed Apr 26 20:41:20 2023: setting up ranker...
Wed Apr 26 20:41:20 2023: ranker set up complete
Wed Apr 26 20:41:20 2023: loop through impressions: 1000
Wed Apr 26 20:41:28 2023: impressions 100/1000
Wed Apr 26 20:41:35 2023: impressions 200/1000
Wed Apr 26 20:41:43 2023: impressions 300/1000
Wed Apr 26 20:41:50 2023: impressions 400/1000
Wed Apr 26 20:41:59 2023: impressions 500/1000
Wed Apr 26 20:42:08 2023: impressions 600/1000
Wed Apr 26 20:42:15 2023: impressions 700/1000
Wed Apr 26 20:42:23 2023: impressions 800/1000
Wed Apr 26 20:42:30 2023: impressions 900/1000
Wed Apr 26 20:42:37 2023: impressions 1000/1000
Wed Apr 26 20:42:37 2023: train_ranking
Wed Apr 26 20:42:37 2023: ranking_labels
Wed Apr 26 20:41:23 2023: setting up ranker...
Wed Apr 26 20:41:23 2023: ranker set up complete
Wed Apr 26 20:41:23 2023: loop through impressions: 1000
Wed Apr 26 20:41:30 2023: impressions 100/1000
Wed Apr 26 20:41:38 2023: impressions 200/1000
Wed Apr 26 20:41:46 2023: impressions 300/1000
Wed Apr 26 20:41:54 2023: impressions 400/1000
Wed Apr 26 20:42:03 2023: impressions 500/1000
Wed Apr 26 20:42:12 2023: impressions 600/1000
Wed Apr 26 20:42:21 2023: impressions 700/1000
Wed Apr 26 20:42:28 2023: impressions 800/1000
Wed Apr 26 20:42:36 2023: impressions 900/1000
Wed Apr 26 20:42:42 2023: impressions 1000/1000
Wed Apr 26 20:42:42 2023: train_ranking
Wed Apr 26 20:42:42 2023: ranking_labels
Wed Apr 26 20:41:24 2023: setting up ranker...
Wed Apr 26 20:41:24 2023: ranker set up complete
Wed Apr 26 20:41:24 2023: loop through impressions: 1000
Wed Apr 26 20:41:32 2023: impressions 100/1000
Wed Apr 26 20:41:39 2023: impressions 200/1000
Wed Apr 26 20:41:47 2023: impressions 300/1000
Wed Apr 26 20:41:56 2023: impressions 400/1000
Wed Apr 26 20:42:05 2023: impressions 500/1000
Wed Apr 26 20:42:14 2023: impressions 600/1000
Wed Apr 26 20:42:23 2023: impressions 700/1000
Wed Apr 26 20:42:30 2023: impressions 800/1000
Wed Apr 26 20:42:37 2023: impressions 900/1000
Wed Apr 26 20:42:43 2023: impressions 1000/1000
Wed Apr 26 20:42:43 2023: train_ranking
Wed Apr 26 20:42:43 2023: ranking_labels
Wed Apr 26 20:41:27 2023: setting up ranker...
Wed Apr 26 20:41:27 2023: ranker set up complete
Wed Apr 26 20:41:27 2023: loop through impressions: 1000
Wed Apr 26 20:41:36 2023: impressions 100/1000
Wed Apr 26 20:41:44 2023: impressions 200/1000
Wed Apr 26 20:41:52 2023: impressions 300/1000
Wed Apr 26 20:42:01 2023: impressions 400/1000
Wed Apr 26 20:42:10 2023: impressions 500/1000
Wed Apr 26 20:42:19 2023: impressions 600/1000
Wed Apr 26 20:42:27 2023: impressions 700/1000
Wed Apr 26 20:42:33 2023: impressions 800/1000
Wed Apr 26 20:42:39 2023: impressions 900/1000
Wed Apr 26 20:42:45 2023: impressions 1000/1000
Wed Apr 26 20:42:45 2023: train_ranking
Wed Apr 26 20:42:45 2023: ranking_labels
Wed Apr 26 20:41:26 2023: setting up ranker...
Wed Apr 26 20:41:26 2023: ranker set up complete
Wed Apr 26 20:41:26 2023: loop through impressions: 1000
Wed Apr 26 20:41:32 2023: impressions 100/1000
Wed Apr 26 20:41:39 2023: impressions 200/1000
Wed Apr 26 20:41:48 2023: impressions 300/1000
Wed Apr 26 20:41:56 2023: impressions 400/1000
Wed Apr 26 20:42:05 2023: impressions 500/1000
Wed Apr 26 20:42:15 2023: impressions 600/1000
Wed Apr 26 20:42:24 2023: impressions 700/1000
Wed Apr 26 20:42:32 2023: impressions 800/1000
Wed Apr 26 20:42:39 2023: impressions 900/1000
Wed Apr 26 20:42:45 2023: impressions 1000/1000
Wed Apr 26 20:42:45 2023: train_ranking
Wed Apr 26 20:42:45 2023: ranking_labels
Wed Apr 26 20:41:41 2023: setting up ranker...
Wed Apr 26 20:41:41 2023: ranker set up complete
Wed Apr 26 20:41:41 2023: loop through impressions: 1000
Wed Apr 26 20:41:51 2023: impressions 100/1000
Wed Apr 26 20:41:59 2023: impressions 200/1000
Wed Apr 26 20:42:08 2023: impressions 300/1000
Wed Apr 26 20:42:17 2023: impressions 400/1000
Wed Apr 26 20:42:25 2023: impressions 500/1000
Wed Apr 26 20:42:33 2023: impressions 600/1000
Wed Apr 26 20:42:41 2023: impressions 700/1000
Wed Apr 26 20:42:47 2023: impressions 800/1000
Wed Apr 26 20:42:54 2023: impressions 900/1000
Wed Apr 26 20:43:01 2023: impressions 1000/1000
Wed Apr 26 20:43:01 2023: train_ranking
Wed Apr 26 20:43:01 2023: ranking_labels
Wed Apr 26 20:41:50 2023: setting up ranker...
Wed Apr 26 20:41:50 2023: ranker set up complete
Wed Apr 26 20:41:50 2023: loop through impressions: 1000
Wed Apr 26 20:42:01 2023: impressions 100/1000
Wed Apr 26 20:42:11 2023: impressions 200/1000
Wed Apr 26 20:42:19 2023: impressions 300/1000
Wed Apr 26 20:42:26 2023: impressions 400/1000
Wed Apr 26 20:42:33 2023: impressions 500/1000
Wed Apr 26 20:42:41 2023: impressions 600/1000
Wed Apr 26 20:42:47 2023: impressions 700/1000
Wed Apr 26 20:42:55 2023: impressions 800/1000
Wed Apr 26 20:43:01 2023: impressions 900/1000
Wed Apr 26 20:43:07 2023: impressions 1000/1000
Wed Apr 26 20:43:07 2023: train_ranking
Wed Apr 26 20:43:07 2023: ranking_labels
Wed Apr 26 20:41:58 2023: setting up ranker...
Wed Apr 26 20:41:58 2023: ranker set up complete
Wed Apr 26 20:41:58 2023: loop through impressions: 1000
Wed Apr 26 20:42:08 2023: impressions 100/1000
Wed Apr 26 20:42:16 2023: impressions 200/1000
Wed Apr 26 20:42:24 2023: impressions 300/1000
Wed Apr 26 20:42:32 2023: impressions 400/1000
Wed Apr 26 20:42:39 2023: impressions 500/1000
Wed Apr 26 20:42:45 2023: impressions 600/1000
Wed Apr 26 20:42:51 2023: impressions 700/1000
Wed Apr 26 20:42:57 2023: impressions 800/1000
Wed Apr 26 20:43:03 2023: impressions 900/1000
Wed Apr 26 20:43:09 2023: impressions 1000/1000
Wed Apr 26 20:43:09 2023: train_ranking
Wed Apr 26 20:43:09 2023: ranking_labels
Wed Apr 26 20:42:04 2023: setting up ranker...
Wed Apr 26 20:42:04 2023: ranker set up complete
Wed Apr 26 20:42:04 2023: loop through impressions: 1000
Wed Apr 26 20:42:15 2023: impressions 100/1000
Wed Apr 26 20:42:23 2023: impressions 200/1000
Wed Apr 26 20:42:31 2023: impressions 300/1000
Wed Apr 26 20:42:38 2023: impressions 400/1000
Wed Apr 26 20:42:43 2023: impressions 500/1000
Wed Apr 26 20:42:49 2023: impressions 600/1000
Wed Apr 26 20:42:56 2023: impressions 700/1000
Wed Apr 26 20:43:03 2023: impressions 800/1000
Wed Apr 26 20:43:09 2023: impressions 900/1000
Wed Apr 26 20:43:15 2023: impressions 1000/1000
Wed Apr 26 20:43:15 2023: train_ranking
Wed Apr 26 20:43:15 2023: ranking_labels
Wed Apr 26 20:42:12 2023: setting up ranker...
Wed Apr 26 20:42:12 2023: ranker set up complete
Wed Apr 26 20:42:12 2023: loop through impressions: 1000
Wed Apr 26 20:42:21 2023: impressions 100/1000
Wed Apr 26 20:42:29 2023: impressions 200/1000
Wed Apr 26 20:42:36 2023: impressions 300/1000
Wed Apr 26 20:42:43 2023: impressions 400/1000
Wed Apr 26 20:42:49 2023: impressions 500/1000
Wed Apr 26 20:42:57 2023: impressions 600/1000
Wed Apr 26 20:43:03 2023: impressions 700/1000
Wed Apr 26 20:43:09 2023: impressions 800/1000
Wed Apr 26 20:43:16 2023: impressions 900/1000
Wed Apr 26 20:43:23 2023: impressions 1000/1000
Wed Apr 26 20:43:23 2023: train_ranking
Wed Apr 26 20:43:23 2023: ranking_labels
Wed Apr 26 20:42:24 2023: setting up ranker...
Wed Apr 26 20:42:24 2023: ranker set up complete
Wed Apr 26 20:42:24 2023: loop through impressions: 1000
Wed Apr 26 20:42:31 2023: impressions 100/1000
Wed Apr 26 20:42:39 2023: impressions 200/1000
Wed Apr 26 20:42:45 2023: impressions 300/1000
Wed Apr 26 20:42:51 2023: impressions 400/1000
Wed Apr 26 20:42:57 2023: impressions 500/1000
Wed Apr 26 20:43:03 2023: impressions 600/1000
Wed Apr 26 20:43:10 2023: impressions 700/1000
Wed Apr 26 20:43:16 2023: impressions 800/1000
Wed Apr 26 20:43:22 2023: impressions 900/1000
Wed Apr 26 20:43:27 2023: impressions 1000/1000
Wed Apr 26 20:43:27 2023: train_ranking
Wed Apr 26 20:43:27 2023: ranking_labels
Wed Apr 26 20:42:19 2023: setting up ranker...
Wed Apr 26 20:42:19 2023: ranker set up complete
Wed Apr 26 20:42:20 2023: loop through impressions: 1000
Wed Apr 26 20:42:28 2023: impressions 100/1000
Wed Apr 26 20:42:36 2023: impressions 200/1000
Wed Apr 26 20:42:43 2023: impressions 300/1000
Wed Apr 26 20:42:48 2023: impressions 400/1000
Wed Apr 26 20:42:56 2023: impressions 500/1000
Wed Apr 26 20:43:03 2023: impressions 600/1000
Wed Apr 26 20:43:09 2023: impressions 700/1000
Wed Apr 26 20:43:15 2023: impressions 800/1000
Wed Apr 26 20:43:21 2023: impressions 900/1000
Wed Apr 26 20:43:27 2023: impressions 1000/1000
Wed Apr 26 20:43:27 2023: train_ranking
Wed Apr 26 20:43:27 2023: ranking_labels
Wed Apr 26 20:42:26 2023: setting up ranker...
Wed Apr 26 20:42:26 2023: ranker set up complete
Wed Apr 26 20:42:26 2023: loop through impressions: 1000
Wed Apr 26 20:42:33 2023: impressions 100/1000
Wed Apr 26 20:42:40 2023: impressions 200/1000
Wed Apr 26 20:42:47 2023: impressions 300/1000
Wed Apr 26 20:42:54 2023: impressions 400/1000
Wed Apr 26 20:43:00 2023: impressions 500/1000
Wed Apr 26 20:43:07 2023: impressions 600/1000
Wed Apr 26 20:43:12 2023: impressions 700/1000
Wed Apr 26 20:43:19 2023: impressions 800/1000
Wed Apr 26 20:43:25 2023: impressions 900/1000
Wed Apr 26 20:43:30 2023: impressions 1000/1000
Wed Apr 26 20:43:30 2023: train_ranking
Wed Apr 26 20:43:30 2023: ranking_labels
Wed Apr 26 20:42:30 2023: setting up ranker...
Wed Apr 26 20:42:30 2023: ranker set up complete
Wed Apr 26 20:42:30 2023: loop through impressions: 1000
Wed Apr 26 20:42:38 2023: impressions 100/1000
Wed Apr 26 20:42:43 2023: impressions 200/1000
Wed Apr 26 20:42:49 2023: impressions 300/1000
Wed Apr 26 20:42:55 2023: impressions 400/1000
Wed Apr 26 20:43:01 2023: impressions 500/1000
Wed Apr 26 20:43:07 2023: impressions 600/1000
Wed Apr 26 20:43:13 2023: impressions 700/1000
Wed Apr 26 20:43:20 2023: impressions 800/1000
Wed Apr 26 20:43:26 2023: impressions 900/1000
Wed Apr 26 20:43:31 2023: impressions 1000/1000
Wed Apr 26 20:43:31 2023: train_ranking
Wed Apr 26 20:43:31 2023: ranking_labels
Wed Apr 26 20:42:34 2023: setting up ranker...
Wed Apr 26 20:42:34 2023: ranker set up complete
Wed Apr 26 20:42:34 2023: loop through impressions: 1000
Wed Apr 26 20:42:40 2023: impressions 100/1000
Wed Apr 26 20:42:46 2023: impressions 200/1000
Wed Apr 26 20:42:54 2023: impressions 300/1000
Wed Apr 26 20:43:01 2023: impressions 400/1000
Wed Apr 26 20:43:07 2023: impressions 500/1000
Wed Apr 26 20:43:13 2023: impressions 600/1000
Wed Apr 26 20:43:20 2023: impressions 700/1000
Wed Apr 26 20:43:26 2023: impressions 800/1000
Wed Apr 26 20:43:31 2023: impressions 900/1000
Wed Apr 26 20:43:37 2023: impressions 1000/1000
Wed Apr 26 20:43:37 2023: train_ranking
Wed Apr 26 20:43:37 2023: ranking_labels
Wed Apr 26 20:42:36 2023: setting up ranker...
Wed Apr 26 20:42:36 2023: ranker set up complete
Wed Apr 26 20:42:36 2023: loop through impressions: 1000
Wed Apr 26 20:42:43 2023: impressions 100/1000
Wed Apr 26 20:42:47 2023: impressions 200/1000
Wed Apr 26 20:42:56 2023: impressions 300/1000
Wed Apr 26 20:43:02 2023: impressions 400/1000
Wed Apr 26 20:43:07 2023: impressions 500/1000
Wed Apr 26 20:43:13 2023: impressions 600/1000
Wed Apr 26 20:43:20 2023: impressions 700/1000
Wed Apr 26 20:43:26 2023: impressions 800/1000
Wed Apr 26 20:43:32 2023: impressions 900/1000
Wed Apr 26 20:43:37 2023: impressions 1000/1000
Wed Apr 26 20:43:37 2023: train_ranking
Wed Apr 26 20:43:37 2023: ranking_labels
Wed Apr 26 20:42:39 2023: setting up ranker...
Wed Apr 26 20:42:39 2023: ranker set up complete
Wed Apr 26 20:42:39 2023: loop through impressions: 1000
Wed Apr 26 20:42:45 2023: impressions 100/1000
Wed Apr 26 20:42:52 2023: impressions 200/1000
Wed Apr 26 20:42:59 2023: impressions 300/1000
Wed Apr 26 20:43:05 2023: impressions 400/1000
Wed Apr 26 20:43:10 2023: impressions 500/1000
Wed Apr 26 20:43:17 2023: impressions 600/1000
Wed Apr 26 20:43:24 2023: impressions 700/1000
Wed Apr 26 20:43:29 2023: impressions 800/1000
Wed Apr 26 20:43:34 2023: impressions 900/1000
Wed Apr 26 20:43:39 2023: impressions 1000/1000
Wed Apr 26 20:43:39 2023: train_ranking
Wed Apr 26 20:43:39 2023: ranking_labels
Wed Apr 26 20:42:45 2023: setting up ranker...
Wed Apr 26 20:42:45 2023: ranker set up complete
Wed Apr 26 20:42:45 2023: loop through impressions: 1000
Wed Apr 26 20:42:52 2023: impressions 100/1000
Wed Apr 26 20:42:59 2023: impressions 200/1000
Wed Apr 26 20:43:06 2023: impressions 300/1000
Wed Apr 26 20:43:12 2023: impressions 400/1000
Wed Apr 26 20:43:19 2023: impressions 500/1000
Wed Apr 26 20:43:25 2023: impressions 600/1000
Wed Apr 26 20:43:30 2023: impressions 700/1000
Wed Apr 26 20:43:35 2023: impressions 800/1000
Wed Apr 26 20:43:39 2023: impressions 900/1000
Wed Apr 26 20:43:42 2023: impressions 1000/1000
Wed Apr 26 20:43:42 2023: train_ranking
Wed Apr 26 20:43:42 2023: ranking_labels
Wed Apr 26 20:42:52 2023: setting up ranker...
Wed Apr 26 20:42:52 2023: ranker set up complete
Wed Apr 26 20:42:52 2023: loop through impressions: 1000
Wed Apr 26 20:43:00 2023: impressions 100/1000
Wed Apr 26 20:43:06 2023: impressions 200/1000
Wed Apr 26 20:43:13 2023: impressions 300/1000
Wed Apr 26 20:43:20 2023: impressions 400/1000
Wed Apr 26 20:43:26 2023: impressions 500/1000
Wed Apr 26 20:43:31 2023: impressions 600/1000
Wed Apr 26 20:43:36 2023: impressions 700/1000
Wed Apr 26 20:43:41 2023: impressions 800/1000
Wed Apr 26 20:43:45 2023: impressions 900/1000
Wed Apr 26 20:43:49 2023: impressions 1000/1000
Wed Apr 26 20:43:49 2023: train_ranking
Wed Apr 26 20:43:49 2023: ranking_labels
Wed Apr 26 20:43:30 2023: Output 0: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (1/2000)
Wed Apr 26 20:43:31 2023: Output 1: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (2/2000)
Wed Apr 26 20:43:32 2023: Output 2: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (3/2000)
Wed Apr 26 20:43:33 2023: Output 3: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (4/2000)
Wed Apr 26 20:43:34 2023: Output 4: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (5/2000)
Wed Apr 26 20:43:35 2023: Output 5: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (6/2000)
Wed Apr 26 20:43:35 2023: Output 6: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (7/2000)
Wed Apr 26 20:43:36 2023: Output 7: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (8/2000)
Wed Apr 26 20:43:37 2023: Output 8: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (9/2000)
Wed Apr 26 20:43:38 2023: Output 9: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (10/2000)
Wed Apr 26 20:43:38 2023: Output 10: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (11/2000)
Wed Apr 26 20:43:39 2023: Output 11: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (12/2000)
Wed Apr 26 20:43:40 2023: Output 12: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (13/2000)
Wed Apr 26 20:43:40 2023: Output 13: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (14/2000)
Wed Apr 26 20:43:40 2023: Output 14: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (15/2000)
Wed Apr 26 20:43:41 2023: Output 15: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (16/2000)
Wed Apr 26 20:43:42 2023: Output 16: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (17/2000)
Wed Apr 26 20:43:42 2023: Output 17: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (18/2000)
Wed Apr 26 20:43:43 2023: Output 18: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (19/2000)
Wed Apr 26 20:43:43 2023: Output 19: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (20/2000)
Wed Apr 26 20:43:44 2023: Output 20: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (21/2000)
Wed Apr 26 20:43:45 2023: Output 21: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (22/2000)
Wed Apr 26 20:43:45 2023: Output 22: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (23/2000)
Wed Apr 26 20:43:46 2023: Output 23: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (24/2000)
Wed Apr 26 20:43:46 2023: Output 24: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (25/2000)
Wed Apr 26 20:43:46 2023: Output 25: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (26/2000)
Wed Apr 26 20:43:47 2023: Output 26: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (27/2000)
Wed Apr 26 20:43:47 2023: Output 27: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (28/2000)
Wed Apr 26 20:43:48 2023: Output 28: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (29/2000)
Wed Apr 26 20:43:48 2023: Output 29: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (30/2000)
Wed Apr 26 20:43:49 2023: Output 30: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (31/2000)
Wed Apr 26 20:43:50 2023: Output 31: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (32/2000)
Wed Apr 26 20:43:50 2023: Output 32: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (33/2000)
Wed Apr 26 20:43:51 2023: Output 33: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (34/2000)
Wed Apr 26 20:43:51 2023: Launch 40: algo/PDBTR/info/1000/10/0.1-0.99999977-1 40 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:52 2023: Launch 41: algo/PDBTR/info/1000/10/0.1-0.99999977-1 41 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:53 2023: Launch 42: algo/PDBTR/info/1000/10/0.1-0.99999977-1 42 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:54 2023: Launch 43: algo/PDBTR/info/1000/10/0.1-0.99999977-1 43 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:54 2023: Launch 44: algo/PDBTR/info/1000/10/0.1-0.99999977-1 44 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:55 2023: Launch 45: algo/PDBTR/info/1000/10/0.1-0.99999977-1 45 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:56 2023: Launch 46: algo/PDBTR/info/1000/10/0.1-0.99999977-1 46 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:57 2023: Launch 47: algo/PDBTR/info/1000/10/0.1-0.99999977-1 47 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:58 2023: Launch 48: algo/PDBTR/info/1000/10/0.1-0.99999977-1 48 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:43:59 2023: Launch 49: algo/PDBTR/info/1000/10/0.1-0.99999977-1 49 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:00 2023: Launch 50: algo/PDBTR/info/1000/10/0.1-0.99999977-1 50 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:01 2023: Launch 51: algo/PDBTR/info/1000/10/0.1-0.99999977-1 51 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:03 2023: Launch 52: algo/PDBTR/info/1000/10/0.1-0.99999977-1 52 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:04 2023: Launch 53: algo/PDBTR/info/1000/10/0.1-0.99999977-1 53 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:05 2023: Launch 54: algo/PDBTR/info/1000/10/0.1-0.99999977-1 54 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:07 2023: Launch 55: algo/PDBTR/info/1000/10/0.1-0.99999977-1 55 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:09 2023: Launch 56: algo/PDBTR/info/1000/10/0.1-0.99999977-1 56 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:10 2023: Launch 57: algo/PDBTR/info/1000/10/0.1-0.99999977-1 57 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:13 2023: Launch 58: algo/PDBTR/info/1000/10/0.1-0.99999977-1 58 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:15 2023: Launch 59: algo/PDBTR/info/1000/10/0.1-0.99999977-1 59 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:19 2023: Launch 60: algo/PDBTR/info/1000/10/0.1-0.99999977-1 60 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:21 2023: Launch 61: algo/PDBTR/info/1000/10/0.1-0.99999977-1 61 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:23 2023: Launch 62: algo/PDBTR/info/1000/10/0.1-0.99999977-1 62 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:25 2023: Launch 63: algo/PDBTR/info/1000/10/0.1-0.99999977-1 63 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:27 2023: Launch 64: algo/PDBTR/info/1000/10/0.1-0.99999977-1 64 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:29 2023: Launch 65: algo/PDBTR/info/1000/10/0.1-0.99999977-1 65 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:31 2023: Launch 66: algo/PDBTR/info/1000/10/0.1-0.99999977-1 66 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:33 2023: Launch 67: algo/PDBTR/info/1000/10/0.1-0.99999977-1 67 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:35 2023: Launch 68: algo/PDBTR/info/1000/10/0.1-0.99999977-1 68 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:37 2023: Launch 69: algo/PDBTR/info/1000/10/0.1-0.99999977-1 69 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:44:52 2023: Launch 70: algo/PDBTR/info/1000/10/0.1-0.99999977-1 70 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:45:04 2023: Launch 71: algo/PDBTR/info/1000/10/0.1-0.99999977-1 71 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:45:15 2023: Launch 72: algo/PDBTR/info/1000/10/0.1-0.99999977-1 72 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:45:24 2023: Launch 73: algo/PDBTR/info/1000/10/0.1-0.99999977-1 73 with click model informational on fold 1 from dataset MQ2008.
Wed Apr 26 20:42:59 2023: setting up ranker...
Wed Apr 26 20:42:59 2023: ranker set up complete
Wed Apr 26 20:42:59 2023: loop through impressions: 1000
Wed Apr 26 20:43:07 2023: impressions 100/1000
Wed Apr 26 20:43:12 2023: impressions 200/1000
Wed Apr 26 20:43:20 2023: impressions 300/1000
Wed Apr 26 20:43:25 2023: impressions 400/1000
Wed Apr 26 20:43:31 2023: impressions 500/1000
Wed Apr 26 20:43:37 2023: impressions 600/1000
Wed Apr 26 20:43:41 2023: impressions 700/1000
Wed Apr 26 20:43:45 2023: impressions 800/1000
Wed Apr 26 20:43:48 2023: impressions 900/1000
Wed Apr 26 20:43:51 2023: impressions 1000/1000
Wed Apr 26 20:43:51 2023: train_ranking
Wed Apr 26 20:43:51 2023: ranking_labels
Wed Apr 26 20:43:04 2023: setting up ranker...
Wed Apr 26 20:43:04 2023: ranker set up complete
Wed Apr 26 20:43:04 2023: loop through impressions: 1000
Wed Apr 26 20:43:11 2023: impressions 100/1000
Wed Apr 26 20:43:17 2023: impressions 200/1000
Wed Apr 26 20:43:24 2023: impressions 300/1000
Wed Apr 26 20:43:30 2023: impressions 400/1000
Wed Apr 26 20:43:35 2023: impressions 500/1000
Wed Apr 26 20:43:40 2023: impressions 600/1000
Wed Apr 26 20:43:44 2023: impressions 700/1000
Wed Apr 26 20:43:47 2023: impressions 800/1000
Wed Apr 26 20:43:51 2023: impressions 900/1000
Wed Apr 26 20:43:55 2023: impressions 1000/1000
Wed Apr 26 20:43:55 2023: train_ranking
Wed Apr 26 20:43:55 2023: ranking_labels
Wed Apr 26 20:43:10 2023: setting up ranker...
Wed Apr 26 20:43:10 2023: ranker set up complete
Wed Apr 26 20:43:10 2023: loop through impressions: 1000
Wed Apr 26 20:43:16 2023: impressions 100/1000
Wed Apr 26 20:43:23 2023: impressions 200/1000
Wed Apr 26 20:43:28 2023: impressions 300/1000
Wed Apr 26 20:43:34 2023: impressions 400/1000
Wed Apr 26 20:43:39 2023: impressions 500/1000
Wed Apr 26 20:43:43 2023: impressions 600/1000
Wed Apr 26 20:43:47 2023: impressions 700/1000
Wed Apr 26 20:43:50 2023: impressions 800/1000
Wed Apr 26 20:43:53 2023: impressions 900/1000
Wed Apr 26 20:43:57 2023: impressions 1000/1000
Wed Apr 26 20:43:57 2023: train_ranking
Wed Apr 26 20:43:57 2023: ranking_labels
Wed Apr 26 20:43:15 2023: setting up ranker...
Wed Apr 26 20:43:15 2023: ranker set up complete
Wed Apr 26 20:43:15 2023: loop through impressions: 1000
Wed Apr 26 20:43:22 2023: impressions 100/1000
Wed Apr 26 20:43:27 2023: impressions 200/1000
Wed Apr 26 20:43:32 2023: impressions 300/1000
Wed Apr 26 20:43:37 2023: impressions 400/1000
Wed Apr 26 20:43:42 2023: impressions 500/1000
Wed Apr 26 20:43:46 2023: impressions 600/1000
Wed Apr 26 20:43:49 2023: impressions 700/1000
Wed Apr 26 20:43:53 2023: impressions 800/1000
Wed Apr 26 20:43:56 2023: impressions 900/1000
Wed Apr 26 20:44:02 2023: impressions 1000/1000
Wed Apr 26 20:44:02 2023: train_ranking
Wed Apr 26 20:44:02 2023: ranking_labels
Wed Apr 26 20:43:20 2023: setting up ranker...
Wed Apr 26 20:43:20 2023: ranker set up complete
Wed Apr 26 20:43:20 2023: loop through impressions: 1000
Wed Apr 26 20:43:26 2023: impressions 100/1000
Wed Apr 26 20:43:32 2023: impressions 200/1000
Wed Apr 26 20:43:37 2023: impressions 300/1000
Wed Apr 26 20:43:41 2023: impressions 400/1000
Wed Apr 26 20:43:44 2023: impressions 500/1000
Wed Apr 26 20:43:47 2023: impressions 600/1000
Wed Apr 26 20:43:50 2023: impressions 700/1000
Wed Apr 26 20:43:53 2023: impressions 800/1000
Wed Apr 26 20:43:57 2023: impressions 900/1000
Wed Apr 26 20:44:03 2023: impressions 1000/1000
Wed Apr 26 20:44:03 2023: train_ranking
Wed Apr 26 20:44:03 2023: ranking_labels
Wed Apr 26 20:45:38 2023: Output 34: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (35/2000)
Wed Apr 26 20:45:39 2023: Output 35: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (36/2000)
Wed Apr 26 20:45:41 2023: Output 36: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (37/2000)
Wed Apr 26 20:45:42 2023: Output 37: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (38/2000)
Wed Apr 26 20:45:43 2023: Output 38: algo/PDBTR/info/1000/10/0.1-0.99999977-1 on dataset MQ2008. (39/2000)
Wed Apr 26 20:43:54 2023: setting up ranker...
Wed Apr 26 20:43:54 2023: ranker set up complete
Wed Apr 26 20:43:54 2023: loop through impressions: 1000
Wed Apr 26 20:43:59 2023: impressions 100/1000
Wed Apr 26 20:44:06 2023: impressions 200/1000
Wed Apr 26 20:44:14 2023: impressions 300/1000
Wed Apr 26 20:44:22 2023: impressions 400/1000
Wed Apr 26 20:44:31 2023: impressions 500/1000
Wed Apr 26 20:44:40 2023: impressions 600/1000
Wed Apr 26 20:44:51 2023: impressions 700/1000
Wed Apr 26 20:45:02 2023: impressions 800/1000
Wed Apr 26 20:45:14 2023: impressions 900/1000
Wed Apr 26 20:45:24 2023: impressions 1000/1000
Wed Apr 26 20:45:24 2023: train_ranking
Wed Apr 26 20:45:25 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-45:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:07 2023: setting up ranker...
Wed Apr 26 20:44:07 2023: ranker set up complete
Wed Apr 26 20:44:07 2023: loop through impressions: 1000
Wed Apr 26 20:44:14 2023: impressions 100/1000
Wed Apr 26 20:44:23 2023: impressions 200/1000
Wed Apr 26 20:44:31 2023: impressions 300/1000
Wed Apr 26 20:44:41 2023: impressions 400/1000
Wed Apr 26 20:44:52 2023: impressions 500/1000
Wed Apr 26 20:45:04 2023: impressions 600/1000
Wed Apr 26 20:45:16 2023: impressions 700/1000
Wed Apr 26 20:45:27 2023: impressions 800/1000
Wed Apr 26 20:45:38 2023: impressions 900/1000
Wed Apr 26 20:45:44 2023: Process Process-56:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:44 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:44 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:44 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:44 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:44 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:44 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 35, in make_multileaving
Wed Apr 26 20:45:44 2023:     unnorm_probs = 1. / (inverted_rankings + 1) ** self._tau
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:06 2023: setting up ranker...
Wed Apr 26 20:44:06 2023: ranker set up complete
Wed Apr 26 20:44:06 2023: loop through impressions: 1000
Wed Apr 26 20:44:12 2023: impressions 100/1000
Wed Apr 26 20:44:20 2023: impressions 200/1000
Wed Apr 26 20:44:28 2023: impressions 300/1000
Wed Apr 26 20:44:37 2023: impressions 400/1000
Wed Apr 26 20:44:48 2023: impressions 500/1000
Wed Apr 26 20:44:58 2023: impressions 600/1000
Wed Apr 26 20:45:10 2023: impressions 700/1000
Wed Apr 26 20:45:23 2023: impressions 800/1000
Wed Apr 26 20:45:33 2023: impressions 900/1000
Wed Apr 26 20:45:42 2023: impressions 1000/1000
Wed Apr 26 20:45:42 2023: train_ranking
Wed Apr 26 20:45:42 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-55:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:29 2023: setting up ranker...
Wed Apr 26 20:44:29 2023: ranker set up complete
Wed Apr 26 20:44:29 2023: loop through impressions: 1000
Wed Apr 26 20:44:40 2023: impressions 100/1000
Wed Apr 26 20:44:52 2023: impressions 200/1000
Wed Apr 26 20:45:02 2023: impressions 300/1000
Wed Apr 26 20:45:15 2023: impressions 400/1000
Wed Apr 26 20:45:25 2023: impressions 500/1000
Wed Apr 26 20:45:36 2023: impressions 600/1000
Wed Apr 26 20:45:44 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-66:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:44 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:44 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:44 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:44 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:44 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:44 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 43, in make_multileaving
Wed Apr 26 20:45:44 2023:     choice = np.random.choice(ind, p=probs, replace=False)
Wed Apr 26 20:45:44 2023:   File "mtrand.pyx", line 984, in numpy.random.mtrand.RandomState.choice
Wed Apr 26 20:45:44 2023:   File "<__array_function__ internals>", line 2, in unique
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:15 2023: setting up ranker...
Wed Apr 26 20:44:15 2023: ranker set up complete
Wed Apr 26 20:44:15 2023: loop through impressions: 1000
Wed Apr 26 20:44:24 2023: impressions 100/1000
Wed Apr 26 20:44:33 2023: impressions 200/1000
Wed Apr 26 20:44:44 2023: impressions 300/1000
Wed Apr 26 20:44:56 2023: impressions 400/1000
Wed Apr 26 20:45:09 2023: impressions 500/1000
Wed Apr 26 20:45:21 2023: impressions 600/1000
Wed Apr 26 20:45:32 2023: impressions 700/1000
Wed Apr 26 20:45:42 2023: impressions 800/1000
Wed Apr 26 20:45:44 2023: Process Process-60:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:44 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:44 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:44 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:44 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:44 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:44 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:44 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 120, in preferences_of_list
Wed Apr 26 20:45:44 2023:     log_assign = np.logical_and(comps > lower[:, None, :], comps <= upper[:, None, :])
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:01 2023: setting up ranker...
Wed Apr 26 20:44:01 2023: ranker set up complete
Wed Apr 26 20:44:01 2023: loop through impressions: 1000
Wed Apr 26 20:44:08 2023: impressions 100/1000
Wed Apr 26 20:44:16 2023: impressions 200/1000
Wed Apr 26 20:44:24 2023: impressions 300/1000
Wed Apr 26 20:44:35 2023: impressions 400/1000
Wed Apr 26 20:44:45 2023: impressions 500/1000
Wed Apr 26 20:44:57 2023: impressions 600/1000
Wed Apr 26 20:45:08 2023: impressions 700/1000
Wed Apr 26 20:45:20 2023: impressions 800/1000
Wed Apr 26 20:45:30 2023: impressions 900/1000
Wed Apr 26 20:45:40 2023: impressions 1000/1000
Wed Apr 26 20:45:40 2023: train_ranking
Wed Apr 26 20:45:40 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-52:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:04 2023: setting up ranker...
Wed Apr 26 20:44:04 2023: ranker set up complete
Wed Apr 26 20:44:04 2023: loop through impressions: 1000
Wed Apr 26 20:44:12 2023: impressions 100/1000
Wed Apr 26 20:44:18 2023: impressions 200/1000
Wed Apr 26 20:44:27 2023: impressions 300/1000
Wed Apr 26 20:44:37 2023: impressions 400/1000
Wed Apr 26 20:44:48 2023: impressions 500/1000
Wed Apr 26 20:44:59 2023: impressions 600/1000
Wed Apr 26 20:45:11 2023: impressions 700/1000
Wed Apr 26 20:45:23 2023: impressions 800/1000
Wed Apr 26 20:45:33 2023: impressions 900/1000
Wed Apr 26 20:45:41 2023: impressions 1000/1000
Wed Apr 26 20:45:41 2023: train_ranking
Wed Apr 26 20:45:41 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-54:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:03 2023: setting up ranker...
Wed Apr 26 20:44:03 2023: ranker set up complete
Wed Apr 26 20:44:03 2023: loop through impressions: 1000
Wed Apr 26 20:44:10 2023: impressions 100/1000
Wed Apr 26 20:44:19 2023: impressions 200/1000
Wed Apr 26 20:44:27 2023: impressions 300/1000
Wed Apr 26 20:44:38 2023: impressions 400/1000
Wed Apr 26 20:44:49 2023: impressions 500/1000
Wed Apr 26 20:44:59 2023: impressions 600/1000
Wed Apr 26 20:45:11 2023: impressions 700/1000
Wed Apr 26 20:45:21 2023: impressions 800/1000
Wed Apr 26 20:45:31 2023: impressions 900/1000
Wed Apr 26 20:45:41 2023: impressions 1000/1000
Wed Apr 26 20:45:41 2023: train_ranking
Wed Apr 26 20:45:41 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-53:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:23 2023: setting up ranker...
Wed Apr 26 20:44:23 2023: ranker set up complete
Wed Apr 26 20:44:23 2023: loop through impressions: 1000
Wed Apr 26 20:44:34 2023: impressions 100/1000
Wed Apr 26 20:44:45 2023: impressions 200/1000
Wed Apr 26 20:44:56 2023: impressions 300/1000
Wed Apr 26 20:45:08 2023: impressions 400/1000
Wed Apr 26 20:45:20 2023: impressions 500/1000
Wed Apr 26 20:45:30 2023: impressions 600/1000
Wed Apr 26 20:45:40 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-63:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:44 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:44 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:44 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:44 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:44 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:44 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:44 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:44 2023:   File "../multileaving/ProbabilisticMultileave.py", line 124, in preferences_of_list
Wed Apr 26 20:45:44 2023:     prefs = np.sign(click_count[:, :, None] - click_count[:, None, :])
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:52 2023: setting up ranker...
Wed Apr 26 20:43:52 2023: ranker set up complete
Wed Apr 26 20:43:52 2023: loop through impressions: 1000
Wed Apr 26 20:43:56 2023: impressions 100/1000
Wed Apr 26 20:44:02 2023: impressions 200/1000
Wed Apr 26 20:44:07 2023: impressions 300/1000
Wed Apr 26 20:44:14 2023: impressions 400/1000
Wed Apr 26 20:44:23 2023: impressions 500/1000
Wed Apr 26 20:44:32 2023: impressions 600/1000
Wed Apr 26 20:44:43 2023: impressions 700/1000
Wed Apr 26 20:44:54 2023: impressions 800/1000
Wed Apr 26 20:45:05 2023: impressions 900/1000
Wed Apr 26 20:45:16 2023: impressions 1000/1000
Wed Apr 26 20:45:16 2023: train_ranking
Wed Apr 26 20:45:17 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-42:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:56 2023: setting up ranker...
Wed Apr 26 20:43:56 2023: ranker set up complete
Wed Apr 26 20:43:56 2023: loop through impressions: 1000
Wed Apr 26 20:44:02 2023: impressions 100/1000
Wed Apr 26 20:44:09 2023: impressions 200/1000
Wed Apr 26 20:44:17 2023: impressions 300/1000
Wed Apr 26 20:44:25 2023: impressions 400/1000
Wed Apr 26 20:44:35 2023: impressions 500/1000
Wed Apr 26 20:44:47 2023: impressions 600/1000
Wed Apr 26 20:44:57 2023: impressions 700/1000
Wed Apr 26 20:45:09 2023: impressions 800/1000
Wed Apr 26 20:45:21 2023: impressions 900/1000
Wed Apr 26 20:45:31 2023: impressions 1000/1000
Wed Apr 26 20:45:31 2023: train_ranking
Wed Apr 26 20:45:31 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-47:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:58 2023: setting up ranker...
Wed Apr 26 20:43:58 2023: ranker set up complete
Wed Apr 26 20:43:58 2023: loop through impressions: 1000
Wed Apr 26 20:44:05 2023: impressions 100/1000
Wed Apr 26 20:44:11 2023: impressions 200/1000
Wed Apr 26 20:44:19 2023: impressions 300/1000
Wed Apr 26 20:44:29 2023: impressions 400/1000
Wed Apr 26 20:44:39 2023: impressions 500/1000
Wed Apr 26 20:44:50 2023: impressions 600/1000
Wed Apr 26 20:45:01 2023: impressions 700/1000
Wed Apr 26 20:45:13 2023: impressions 800/1000
Wed Apr 26 20:45:24 2023: impressions 900/1000
Wed Apr 26 20:45:35 2023: impressions 1000/1000
Wed Apr 26 20:45:35 2023: train_ranking
Wed Apr 26 20:45:35 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-49:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:53 2023: setting up ranker...
Wed Apr 26 20:43:53 2023: ranker set up complete
Wed Apr 26 20:43:53 2023: loop through impressions: 1000
Wed Apr 26 20:43:57 2023: impressions 100/1000
Wed Apr 26 20:44:02 2023: impressions 200/1000
Wed Apr 26 20:44:09 2023: impressions 300/1000
Wed Apr 26 20:44:16 2023: impressions 400/1000
Wed Apr 26 20:44:25 2023: impressions 500/1000
Wed Apr 26 20:44:37 2023: impressions 600/1000
Wed Apr 26 20:44:48 2023: impressions 700/1000
Wed Apr 26 20:45:00 2023: impressions 800/1000
Wed Apr 26 20:45:13 2023: impressions 900/1000
Wed Apr 26 20:45:24 2023: impressions 1000/1000
Wed Apr 26 20:45:24 2023: train_ranking
Wed Apr 26 20:45:24 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-43:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:44:00 2023: setting up ranker...
Wed Apr 26 20:44:00 2023: ranker set up complete
Wed Apr 26 20:44:00 2023: loop through impressions: 1000
Wed Apr 26 20:44:06 2023: impressions 100/1000
Wed Apr 26 20:44:14 2023: impressions 200/1000
Wed Apr 26 20:44:21 2023: impressions 300/1000
Wed Apr 26 20:44:29 2023: impressions 400/1000
Wed Apr 26 20:44:41 2023: impressions 500/1000
Wed Apr 26 20:44:53 2023: impressions 600/1000
Wed Apr 26 20:45:04 2023: impressions 700/1000
Wed Apr 26 20:45:16 2023: impressions 800/1000
Wed Apr 26 20:45:26 2023: impressions 900/1000
Wed Apr 26 20:45:38 2023: impressions 1000/1000
Wed Apr 26 20:45:38 2023: train_ranking
Wed Apr 26 20:45:38 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-51:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:54 2023: setting up ranker...
Wed Apr 26 20:43:54 2023: ranker set up complete
Wed Apr 26 20:43:54 2023: loop through impressions: 1000
Wed Apr 26 20:43:58 2023: impressions 100/1000
Wed Apr 26 20:44:05 2023: impressions 200/1000
Wed Apr 26 20:44:10 2023: impressions 300/1000
Wed Apr 26 20:44:17 2023: impressions 400/1000
Wed Apr 26 20:44:25 2023: impressions 500/1000
Wed Apr 26 20:44:35 2023: impressions 600/1000
Wed Apr 26 20:44:45 2023: impressions 700/1000
Wed Apr 26 20:44:56 2023: impressions 800/1000
Wed Apr 26 20:45:07 2023: impressions 900/1000
Wed Apr 26 20:45:19 2023: impressions 1000/1000
Wed Apr 26 20:45:19 2023: train_ranking
Wed Apr 26 20:45:19 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-44:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:51 2023: setting up ranker...
Wed Apr 26 20:43:51 2023: ranker set up complete
Wed Apr 26 20:43:51 2023: loop through impressions: 1000
Wed Apr 26 20:43:55 2023: impressions 100/1000
Wed Apr 26 20:44:00 2023: impressions 200/1000
Wed Apr 26 20:44:06 2023: impressions 300/1000
Wed Apr 26 20:44:13 2023: impressions 400/1000
Wed Apr 26 20:44:22 2023: impressions 500/1000
Wed Apr 26 20:44:31 2023: impressions 600/1000
Wed Apr 26 20:44:40 2023: impressions 700/1000
Wed Apr 26 20:44:51 2023: impressions 800/1000
Wed Apr 26 20:45:03 2023: impressions 900/1000
Wed Apr 26 20:45:14 2023: impressions 1000/1000
Wed Apr 26 20:45:14 2023: train_ranking
Wed Apr 26 20:45:14 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-41:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:44 2023:     thread.join()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:44 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:44 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:44 2023: KeyboardInterrupt
Wed Apr 26 20:43:56 2023: setting up ranker...
Wed Apr 26 20:43:56 2023: ranker set up complete
Wed Apr 26 20:43:56 2023: loop through impressions: 1000
Wed Apr 26 20:44:01 2023: impressions 100/1000
Wed Apr 26 20:44:06 2023: impressions 200/1000
Wed Apr 26 20:44:13 2023: impressions 300/1000
Wed Apr 26 20:44:20 2023: impressions 400/1000
Wed Apr 26 20:44:29 2023: impressions 500/1000
Wed Apr 26 20:44:39 2023: impressions 600/1000
Wed Apr 26 20:44:49 2023: impressions 700/1000
Wed Apr 26 20:45:02 2023: impressions 800/1000
Wed Apr 26 20:45:15 2023: impressions 900/1000
Wed Apr 26 20:45:26 2023: impressions 1000/1000
Wed Apr 26 20:45:26 2023: train_ranking
Wed Apr 26 20:45:26 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-46:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:44 2023:     util._exit_function()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:44 2023:     _run_finalizers()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:44 2023:     finalizer()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:44 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:45 2023:     thread.join()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:45 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:45 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:20 2023: setting up ranker...
Wed Apr 26 20:44:20 2023: ranker set up complete
Wed Apr 26 20:44:20 2023: loop through impressions: 1000
Wed Apr 26 20:44:28 2023: impressions 100/1000
Wed Apr 26 20:44:37 2023: impressions 200/1000
Wed Apr 26 20:44:47 2023: impressions 300/1000
Wed Apr 26 20:44:57 2023: impressions 400/1000
Wed Apr 26 20:45:09 2023: impressions 500/1000
Wed Apr 26 20:45:22 2023: impressions 600/1000
Wed Apr 26 20:45:32 2023: impressions 700/1000
Wed Apr 26 20:45:42 2023: impressions 800/1000
Wed Apr 26 20:45:44 2023: Process Process-61:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 120, in preferences_of_list
Wed Apr 26 20:45:45 2023:     log_assign = np.logical_and(comps > lower[:, None, :], comps <= upper[:, None, :])
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:43:57 2023: setting up ranker...
Wed Apr 26 20:43:57 2023: ranker set up complete
Wed Apr 26 20:43:57 2023: loop through impressions: 1000
Wed Apr 26 20:44:03 2023: impressions 100/1000
Wed Apr 26 20:44:09 2023: impressions 200/1000
Wed Apr 26 20:44:16 2023: impressions 300/1000
Wed Apr 26 20:44:25 2023: impressions 400/1000
Wed Apr 26 20:44:36 2023: impressions 500/1000
Wed Apr 26 20:44:47 2023: impressions 600/1000
Wed Apr 26 20:44:59 2023: impressions 700/1000
Wed Apr 26 20:45:12 2023: impressions 800/1000
Wed Apr 26 20:45:24 2023: impressions 900/1000
Wed Apr 26 20:45:35 2023: impressions 1000/1000
Wed Apr 26 20:45:35 2023: train_ranking
Wed Apr 26 20:45:35 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-48:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:45 2023:     util._exit_function()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:45 2023:     _run_finalizers()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:45 2023:     finalizer()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:45 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:45 2023:     thread.join()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:45 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:45 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:45:29 2023: setting up ranker...
Wed Apr 26 20:45:29 2023: ranker set up complete
Wed Apr 26 20:45:29 2023: loop through impressions: 1000
Wed Apr 26 20:45:44 2023: Process Process-74:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:44 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:44 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:44 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:44 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:44 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 41, in make_multileaving
Wed Apr 26 20:45:45 2023:     norm_probs = unnorm_probs / denom[:, None]
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:43:26 2023: setting up ranker...
Wed Apr 26 20:43:26 2023: ranker set up complete
Wed Apr 26 20:43:26 2023: loop through impressions: 1000
Wed Apr 26 20:43:32 2023: impressions 100/1000
Wed Apr 26 20:43:37 2023: impressions 200/1000
Wed Apr 26 20:43:42 2023: impressions 300/1000
Wed Apr 26 20:43:45 2023: impressions 400/1000
Wed Apr 26 20:43:49 2023: impressions 500/1000
Wed Apr 26 20:43:52 2023: impressions 600/1000
Wed Apr 26 20:43:55 2023: impressions 700/1000
Wed Apr 26 20:44:00 2023: impressions 800/1000
Wed Apr 26 20:44:07 2023: impressions 900/1000
Wed Apr 26 20:44:15 2023: impressions 1000/1000
Wed Apr 26 20:44:15 2023: train_ranking
Wed Apr 26 20:44:15 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-40:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:45 2023:     util._exit_function()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:45 2023:     _run_finalizers()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:45 2023:     finalizer()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:45 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:45 2023:     thread.join()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:45 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:45 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:27 2023: setting up ranker...
Wed Apr 26 20:44:27 2023: ranker set up complete
Wed Apr 26 20:44:27 2023: loop through impressions: 1000
Wed Apr 26 20:44:36 2023: impressions 100/1000
Wed Apr 26 20:44:45 2023: impressions 200/1000
Wed Apr 26 20:44:57 2023: impressions 300/1000
Wed Apr 26 20:45:08 2023: impressions 400/1000
Wed Apr 26 20:45:20 2023: impressions 500/1000
Wed Apr 26 20:45:30 2023: impressions 600/1000
Wed Apr 26 20:45:39 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-65:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 129, in preferences_of_list
Wed Apr 26 20:45:45 2023:     return np.sum(prefs, axis=0) / float(self._n_samples)
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in sum
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2260, in sum
Wed Apr 26 20:45:45 2023:     initial=initial, where=where)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
Wed Apr 26 20:45:45 2023:     return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:43:59 2023: setting up ranker...
Wed Apr 26 20:43:59 2023: ranker set up complete
Wed Apr 26 20:43:59 2023: loop through impressions: 1000
Wed Apr 26 20:44:06 2023: impressions 100/1000
Wed Apr 26 20:44:14 2023: impressions 200/1000
Wed Apr 26 20:44:23 2023: impressions 300/1000
Wed Apr 26 20:44:33 2023: impressions 400/1000
Wed Apr 26 20:44:45 2023: impressions 500/1000
Wed Apr 26 20:44:56 2023: impressions 600/1000
Wed Apr 26 20:45:08 2023: impressions 700/1000
Wed Apr 26 20:45:19 2023: impressions 800/1000
Wed Apr 26 20:45:30 2023: impressions 900/1000
Wed Apr 26 20:45:41 2023: impressions 1000/1000
Wed Apr 26 20:45:41 2023: train_ranking
Wed Apr 26 20:45:41 2023: ranking_labels
Wed Apr 26 20:45:44 2023: Process Process-50:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 300, in _bootstrap
Wed Apr 26 20:45:45 2023:     util._exit_function()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 360, in _exit_function
Wed Apr 26 20:45:45 2023:     _run_finalizers()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 300, in _run_finalizers
Wed Apr 26 20:45:45 2023:     finalizer()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/util.py", line 224, in __call__
Wed Apr 26 20:45:45 2023:     res = self._callback(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/queues.py", line 192, in _finalize_join
Wed Apr 26 20:45:45 2023:     thread.join()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1044, in join
Wed Apr 26 20:45:45 2023:     self._wait_for_tstate_lock()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
Wed Apr 26 20:45:45 2023:     elif lock.acquire(block, timeout):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:10 2023: setting up ranker...
Wed Apr 26 20:44:10 2023: ranker set up complete
Wed Apr 26 20:44:10 2023: loop through impressions: 1000
Wed Apr 26 20:44:19 2023: impressions 100/1000
Wed Apr 26 20:44:27 2023: impressions 200/1000
Wed Apr 26 20:44:37 2023: impressions 300/1000
Wed Apr 26 20:44:49 2023: impressions 400/1000
Wed Apr 26 20:45:01 2023: impressions 500/1000
Wed Apr 26 20:45:12 2023: impressions 600/1000
Wed Apr 26 20:45:23 2023: impressions 700/1000
Wed Apr 26 20:45:34 2023: impressions 800/1000
Wed Apr 26 20:45:43 2023: impressions 900/1000
Wed Apr 26 20:45:44 2023: Process Process-58:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:44 2023:     self.run()
Wed Apr 26 20:45:44 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:44 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:44 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:44 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:44 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 35, in make_multileaving
Wed Apr 26 20:45:45 2023:     unnorm_probs = 1. / (inverted_rankings + 1) ** self._tau
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:35 2023: setting up ranker...
Wed Apr 26 20:44:35 2023: ranker set up complete
Wed Apr 26 20:44:35 2023: loop through impressions: 1000
Wed Apr 26 20:44:46 2023: impressions 100/1000
Wed Apr 26 20:44:58 2023: impressions 200/1000
Wed Apr 26 20:45:10 2023: impressions 300/1000
Wed Apr 26 20:45:21 2023: impressions 400/1000
Wed Apr 26 20:45:32 2023: impressions 500/1000
Wed Apr 26 20:45:42 2023: impressions 600/1000
Wed Apr 26 20:45:44 2023: Process Process-69:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 41, in make_multileaving
Wed Apr 26 20:45:45 2023:     norm_probs = unnorm_probs / denom[:, None]
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:45:05 2023: setting up ranker...
Wed Apr 26 20:45:05 2023: ranker set up complete
Wed Apr 26 20:45:05 2023: loop through impressions: 1000
Wed Apr 26 20:45:18 2023: impressions 100/1000
Wed Apr 26 20:45:28 2023: impressions 200/1000
Wed Apr 26 20:45:39 2023: impressions 300/1000
Wed Apr 26 20:45:44 2023: Process Process-72:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 52, in infer_preferences
Wed Apr 26 20:45:45 2023:     if np.any(clicked_docs):
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in any
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2359, in any
Wed Apr 26 20:45:45 2023:     keepdims=keepdims, where=where)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
Wed Apr 26 20:45:45 2023:     return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:25 2023: setting up ranker...
Wed Apr 26 20:44:25 2023: ranker set up complete
Wed Apr 26 20:44:25 2023: loop through impressions: 1000
Wed Apr 26 20:44:35 2023: impressions 100/1000
Wed Apr 26 20:44:47 2023: impressions 200/1000
Wed Apr 26 20:44:58 2023: impressions 300/1000
Wed Apr 26 20:45:10 2023: impressions 400/1000
Wed Apr 26 20:45:20 2023: impressions 500/1000
Wed Apr 26 20:45:30 2023: impressions 600/1000
Wed Apr 26 20:45:40 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-64:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 97, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     query_feat = self.get_query_features(query_id, self._train_features, self._train_query_ranges)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 75, in get_query_features
Wed Apr 26 20:45:45 2023:     start_i = query_ranges[query_id]
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/memmap.py", line 334, in __getitem__
Wed Apr 26 20:45:45 2023:     res = super().__getitem__(index)
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:21 2023: setting up ranker...
Wed Apr 26 20:44:21 2023: ranker set up complete
Wed Apr 26 20:44:21 2023: loop through impressions: 1000
Wed Apr 26 20:44:31 2023: impressions 100/1000
Wed Apr 26 20:44:42 2023: impressions 200/1000
Wed Apr 26 20:44:54 2023: impressions 300/1000
Wed Apr 26 20:45:06 2023: impressions 400/1000
Wed Apr 26 20:45:18 2023: impressions 500/1000
Wed Apr 26 20:45:28 2023: impressions 600/1000
Wed Apr 26 20:45:37 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-62:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 122, in preferences_of_list
Wed Apr 26 20:45:45 2023:     click_count = np.sum(log_assign, axis=0)
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in sum
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2260, in sum
Wed Apr 26 20:45:45 2023:     initial=initial, where=where)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 69, in _wrapreduction
Wed Apr 26 20:45:45 2023:     def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:38 2023: setting up ranker...
Wed Apr 26 20:44:38 2023: ranker set up complete
Wed Apr 26 20:44:38 2023: loop through impressions: 1000
Wed Apr 26 20:44:51 2023: impressions 100/1000
Wed Apr 26 20:45:02 2023: impressions 200/1000
Wed Apr 26 20:45:14 2023: impressions 300/1000
Wed Apr 26 20:45:25 2023: impressions 400/1000
Wed Apr 26 20:45:35 2023: impressions 500/1000
Wed Apr 26 20:45:44 2023: impressions 600/1000
Wed Apr 26 20:45:44 2023: Process Process-70:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 124, in preferences_of_list
Wed Apr 26 20:45:45 2023:     prefs = np.sign(click_count[:, :, None] - click_count[:, None, :])
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:53 2023: setting up ranker...
Wed Apr 26 20:44:53 2023: ranker set up complete
Wed Apr 26 20:44:53 2023: loop through impressions: 1000
Wed Apr 26 20:45:06 2023: impressions 100/1000
Wed Apr 26 20:45:18 2023: impressions 200/1000
Wed Apr 26 20:45:28 2023: impressions 300/1000
Wed Apr 26 20:45:39 2023: impressions 400/1000
Wed Apr 26 20:45:44 2023: Process Process-71:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 36, in make_multileaving
Wed Apr 26 20:45:45 2023:     denom = np.sum(unnorm_probs, axis=1)
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in sum
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2260, in sum
Wed Apr 26 20:45:45 2023:     initial=initial, where=where)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
Wed Apr 26 20:45:45 2023:     return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:45:15 2023: setting up ranker...
Wed Apr 26 20:45:15 2023: ranker set up complete
Wed Apr 26 20:45:15 2023: loop through impressions: 1000
Wed Apr 26 20:45:26 2023: impressions 100/1000
Wed Apr 26 20:45:37 2023: impressions 200/1000
Wed Apr 26 20:45:44 2023: Process Process-73:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 86, in probability_of_list
Wed Apr 26 20:45:45 2023:     ** self._tau, axis=1)
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in cumsum
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2532, in cumsum
Wed Apr 26 20:45:45 2023:     return _wrapfunc(a, 'cumsum', axis=axis, dtype=dtype, out=out)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 51, in _wrapfunc
Wed Apr 26 20:45:45 2023:     def _wrapfunc(obj, method, *args, **kwds):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:09 2023: setting up ranker...
Wed Apr 26 20:44:09 2023: ranker set up complete
Wed Apr 26 20:44:09 2023: loop through impressions: 1000
Wed Apr 26 20:44:17 2023: impressions 100/1000
Wed Apr 26 20:44:25 2023: impressions 200/1000
Wed Apr 26 20:44:34 2023: impressions 300/1000
Wed Apr 26 20:44:45 2023: impressions 400/1000
Wed Apr 26 20:44:57 2023: impressions 500/1000
Wed Apr 26 20:45:08 2023: impressions 600/1000
Wed Apr 26 20:45:19 2023: impressions 700/1000
Wed Apr 26 20:45:30 2023: impressions 800/1000
Wed Apr 26 20:45:40 2023: impressions 900/1000
Wed Apr 26 20:45:44 2023: Process Process-57:
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 43, in make_multileaving
Wed Apr 26 20:45:45 2023:     choice = np.random.choice(ind, p=probs, replace=False)
Wed Apr 26 20:45:45 2023:   File "mtrand.pyx", line 971, in numpy.random.mtrand.RandomState.choice
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 2, in count_nonzero
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:31 2023: setting up ranker...
Wed Apr 26 20:44:31 2023: ranker set up complete
Wed Apr 26 20:44:31 2023: loop through impressions: 1000
Wed Apr 26 20:44:40 2023: impressions 100/1000
Wed Apr 26 20:44:50 2023: impressions 200/1000
Wed Apr 26 20:45:01 2023: impressions 300/1000
Wed Apr 26 20:45:13 2023: impressions 400/1000
Wed Apr 26 20:45:23 2023: impressions 500/1000
Wed Apr 26 20:45:34 2023: impressions 600/1000
Wed Apr 26 20:45:43 2023: impressions 700/1000
Wed Apr 26 20:45:44 2023: Process Process-67:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 98, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     self._last_ranking = self._create_train_ranking(query_id, query_feat, inverted)[:self.n_results]
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/pdbgd.py", line 38, in _create_train_ranking
Wed Apr 26 20:45:45 2023:     multileaved_list = self.multileaving.make_multileaving(inverted_rankings)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 42, in make_multileaving
Wed Apr 26 20:45:45 2023:     probs = np.mean(norm_probs, axis=0)
Wed Apr 26 20:45:45 2023:   File "<__array_function__ internals>", line 6, in mean
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 3441, in mean
Wed Apr 26 20:45:45 2023:     out=out, **kwargs)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/_methods.py", line 179, in _mean
Wed Apr 26 20:45:45 2023:     ret = umr_sum(arr, axis, dtype, out, keepdims, where=where)
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:33 2023: setting up ranker...
Wed Apr 26 20:44:33 2023: ranker set up complete
Wed Apr 26 20:44:33 2023: loop through impressions: 1000
Wed Apr 26 20:44:47 2023: impressions 100/1000
Wed Apr 26 20:44:58 2023: impressions 200/1000
Wed Apr 26 20:45:09 2023: impressions 300/1000
Wed Apr 26 20:45:21 2023: impressions 400/1000
Wed Apr 26 20:45:33 2023: impressions 500/1000
Wed Apr 26 20:45:43 2023: impressions 600/1000
Wed Apr 26 20:45:44 2023: Process Process-68:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 116, in run
Wed Apr 26 20:45:45 2023:     ranking_i, train_ranking = self.sample_and_rank(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 97, in sample_and_rank
Wed Apr 26 20:45:45 2023:     train_ranking = ranker.get_train_query_ranking(ranking_i)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 97, in get_train_query_ranking
Wed Apr 26 20:45:45 2023:     query_feat = self.get_query_features(query_id, self._train_features, self._train_query_ranges)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 77, in get_query_features
Wed Apr 26 20:45:45 2023:     return features[start_i:end_i, :]
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/memmap.py", line 334, in __getitem__
Wed Apr 26 20:45:45 2023:     res = super().__getitem__(index)
Wed Apr 26 20:45:45 2023:   File "/home/matthew/DBDG/OnlineLearningToRank/env/lib/python3.7/site-packages/numpy/core/memmap.py", line 289, in __array_finalize__
Wed Apr 26 20:45:45 2023:     if hasattr(obj, '_mmap') and np.may_share_memory(self, obj):
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:44:13 2023: setting up ranker...
Wed Apr 26 20:44:13 2023: ranker set up complete
Wed Apr 26 20:44:13 2023: loop through impressions: 1000
Wed Apr 26 20:44:22 2023: impressions 100/1000
Wed Apr 26 20:44:30 2023: impressions 200/1000
Wed Apr 26 20:44:41 2023: impressions 300/1000
Wed Apr 26 20:44:52 2023: impressions 400/1000
Wed Apr 26 20:45:03 2023: impressions 500/1000
Wed Apr 26 20:45:16 2023: impressions 600/1000
Wed Apr 26 20:45:26 2023: impressions 700/1000
Wed Apr 26 20:45:37 2023: impressions 800/1000
Wed Apr 26 20:45:44 2023: Process Process-59:
Wed Apr 26 20:45:45 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 297, in _bootstrap
Wed Apr 26 20:45:45 2023:     self.run()
Wed Apr 26 20:45:45 2023:   File "/usr/lib/python3.7/multiprocessing/process.py", line 99, in run
Wed Apr 26 20:45:45 2023:     self._target(*self._args, **self._kwargs)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 124, in start_run
Wed Apr 26 20:45:45 2023:     simulation.run(ranker, output_key=output_key)
Wed Apr 26 20:45:45 2023:   File "../utils/singlesimulation.py", line 121, in run
Wed Apr 26 20:45:45 2023:     ranker.process_clicks(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/basiconlineranker.py", line 106, in process_clicks
Wed Apr 26 20:45:45 2023:     self.update_to_interaction(clicks)
Wed Apr 26 20:45:45 2023:   File "../algorithms/DBGD/tddbgd.py", line 54, in update_to_interaction
Wed Apr 26 20:45:45 2023:     winners = self.multileaving.winning_rankers(clicks)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 60, in winning_rankers
Wed Apr 26 20:45:45 2023:     match = self.infer_preferences(clicked_docs)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 55, in infer_preferences
Wed Apr 26 20:45:45 2023:     clicked_docs.astype(bool), self._tau), self._n_samples)
Wed Apr 26 20:45:45 2023:   File "../multileaving/ProbabilisticMultileave.py", line 124, in preferences_of_list
Wed Apr 26 20:45:45 2023:     prefs = np.sign(click_count[:, :, None] - click_count[:, None, :])
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
Wed Apr 26 20:45:44 2023: Traceback (most recent call last):
Wed Apr 26 20:45:45 2023:   File "run_script.py", line 141, in <module>
Wed Apr 26 20:45:45 2023:     set_sim_and_run(input_args)
Wed Apr 26 20:45:45 2023:   File "run_script.py", line 133, in set_sim_and_run
Wed Apr 26 20:45:45 2023:     return switcher.get(algo, lambda: "ERROR: algorithm type not valid")()
Wed Apr 26 20:45:45 2023:   File "run_script.py", line 132, in <lambda>
Wed Apr 26 20:45:45 2023:     'PDBTR': lambda: func_pdbgd(args, dir_name),}
Wed Apr 26 20:45:45 2023:   File "run_script.py", line 107, in func_pdbgd
Wed Apr 26 20:45:45 2023:     sim.run(ranker)
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 62, in run
Wed Apr 26 20:45:45 2023:     self.wait_for_output()
Wed Apr 26 20:45:45 2023:   File "../utils/datasimulation.py", line 170, in wait_for_output
Wed Apr 26 20:45:45 2023:     sim_output.write_run_output(run_output)
Wed Apr 26 20:45:45 2023:   File "../utils/simulationoutput.py", line 162, in write_run_output
Wed Apr 26 20:45:45 2023:     self.file_output.write('\n%s' % json.dumps(run_output))
Wed Apr 26 20:45:45 2023:   File "../utils/simulationoutput.py", line 65, in write
Wed Apr 26 20:45:45 2023:     self._write_str_to_file(str(line))
Wed Apr 26 20:45:45 2023:   File "../utils/simulationoutput.py", line 46, in _write_str_to_file
Wed Apr 26 20:45:45 2023:     self._new_line = output_str[-1] == '\n'
Wed Apr 26 20:45:45 2023: KeyboardInterrupt
